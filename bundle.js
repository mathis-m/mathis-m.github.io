!function(t){var r={};function n(e){if(r[e])return r[e].exports;var o=r[e]={i:e,l:!1,exports:{}};return t[e].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=r,n.d=function(t,r,e){n.o(t,r)||Object.defineProperty(t,r,{enumerable:!0,get:e})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,r){if(1&r&&(t=n(t)),8&r)return t;if(4&r&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(n.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&r&&"string"!=typeof t)for(var o in t)n.d(e,o,function(r){return t[r]}.bind(null,o));return e},n.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(r,"a",r),r},n.o=function(t,r){return Object.prototype.hasOwnProperty.call(t,r)},n.p="",n(n.s=0)}([function(t,r,n){"use strict";n.r(r);var e=function(){return function(t,r){this.toNode=t,this.cost=r}}(),o=function(){return function(t,r,n){this.name=t,this.value=r,this.links=n}}(),i=function(){function t(t,r,n){this.name=t,this.value=r,this.connection=n,this.connection.receive.subscribe(this.receive)}return t.prototype.receive=function(t){},t.prototype.send=function(t){this.connection.send.next(t)},t}(),s=function(t,r){return(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,r){t.__proto__=r}||function(t,r){for(var n in r)r.hasOwnProperty(n)&&(t[n]=r[n])})(t,r)};function u(t,r){function n(){this.constructor=t}s(t,r),t.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}function c(t){return"function"==typeof t}var h=!1,a={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack;h=t},get useDeprecatedSynchronousErrorHandling(){return h}};function p(t){setTimeout(function(){throw t})}var f={closed:!0,next:function(t){},error:function(t){if(a.useDeprecatedSynchronousErrorHandling)throw t;p(t)},complete:function(){}},l=Array.isArray||function(t){return t&&"number"==typeof t.length};function b(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map(function(t,r){return r+1+") "+t.toString()}).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}b.prototype=Object.create(Error.prototype);var d=b,y=function(){function t(t){this.closed=!1,this._parent=null,this._parents=null,this._subscriptions=null,t&&(this._unsubscribe=t)}var r;return t.prototype.unsubscribe=function(){var t,r=!1;if(!this.closed){var n=this._parent,e=this._parents,o=this._unsubscribe,i=this._subscriptions;this.closed=!0,this._parent=null,this._parents=null,this._subscriptions=null;for(var s,u=-1,h=e?e.length:0;n;)n.remove(this),n=++u<h&&e[u]||null;if(c(o))try{o.call(this)}catch(n){r=!0,t=n instanceof d?_(n.errors):[n]}if(l(i))for(u=-1,h=i.length;++u<h;){var a=i[u];if(null!==(s=a)&&"object"==typeof s)try{a.unsubscribe()}catch(n){r=!0,t=t||[],n instanceof d?t=t.concat(_(n.errors)):t.push(n)}}if(r)throw new d(t)}},t.prototype.add=function(r){var n=r;switch(typeof r){case"function":n=new t(r);case"object":if(n===this||n.closed||"function"!=typeof n.unsubscribe)return n;if(this.closed)return n.unsubscribe(),n;if(!(n instanceof t)){var e=n;(n=new t)._subscriptions=[e]}break;default:if(!r)return t.EMPTY;throw new Error("unrecognized teardown "+r+" added to Subscription.")}if(n._addParent(this)){var o=this._subscriptions;o?o.push(n):this._subscriptions=[n]}return n},t.prototype.remove=function(t){var r=this._subscriptions;if(r){var n=r.indexOf(t);-1!==n&&r.splice(n,1)}},t.prototype._addParent=function(t){var r=this._parent,n=this._parents;return r!==t&&(r?n?-1===n.indexOf(t)&&(n.push(t),!0):(this._parents=[t],!0):(this._parent=t,!0))},t.EMPTY=((r=new t).closed=!0,r),t}();function _(t){return t.reduce(function(t,r){return t.concat(r instanceof d?r.errors:r)},[])}var v="function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random(),w=function(t){function r(n,e,o){var i=t.call(this)||this;switch(i.syncErrorValue=null,i.syncErrorThrown=!1,i.syncErrorThrowable=!1,i.isStopped=!1,arguments.length){case 0:i.destination=f;break;case 1:if(!n){i.destination=f;break}if("object"==typeof n){n instanceof r?(i.syncErrorThrowable=n.syncErrorThrowable,i.destination=n,n.add(i)):(i.syncErrorThrowable=!0,i.destination=new E(i,n));break}default:i.syncErrorThrowable=!0,i.destination=new E(i,n,e,o)}return i}return u(r,t),r.prototype[v]=function(){return this},r.create=function(t,n,e){var o=new r(t,n,e);return o.syncErrorThrowable=!1,o},r.prototype.next=function(t){this.isStopped||this._next(t)},r.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},r.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},r.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},r.prototype._next=function(t){this.destination.next(t)},r.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},r.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},r.prototype._unsubscribeAndRecycle=function(){var t=this._parent,r=this._parents;return this._parent=null,this._parents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parent=t,this._parents=r,this},r}(y),E=function(t){function r(r,n,e,o){var i,s=t.call(this)||this;s._parentSubscriber=r;var u=s;return c(n)?i=n:n&&(i=n.next,e=n.error,o=n.complete,n!==f&&(c((u=Object.create(n)).unsubscribe)&&s.add(u.unsubscribe.bind(u)),u.unsubscribe=s.unsubscribe.bind(s))),s._context=u,s._next=i,s._error=e,s._complete=o,s}return u(r,t),r.prototype.next=function(t){if(!this.isStopped&&this._next){var r=this._parentSubscriber;a.useDeprecatedSynchronousErrorHandling&&r.syncErrorThrowable?this.__tryOrSetError(r,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},r.prototype.error=function(t){if(!this.isStopped){var r=this._parentSubscriber,n=a.useDeprecatedSynchronousErrorHandling;if(this._error)n&&r.syncErrorThrowable?(this.__tryOrSetError(r,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(r.syncErrorThrowable)n?(r.syncErrorValue=t,r.syncErrorThrown=!0):p(t),this.unsubscribe();else{if(this.unsubscribe(),n)throw t;p(t)}}},r.prototype.complete=function(){var t=this;if(!this.isStopped){var r=this._parentSubscriber;if(this._complete){var n=function(){return t._complete.call(t._context)};a.useDeprecatedSynchronousErrorHandling&&r.syncErrorThrowable?(this.__tryOrSetError(r,n),this.unsubscribe()):(this.__tryOrUnsub(n),this.unsubscribe())}else this.unsubscribe()}},r.prototype.__tryOrUnsub=function(t,r){try{t.call(this._context,r)}catch(t){if(this.unsubscribe(),a.useDeprecatedSynchronousErrorHandling)throw t;p(t)}},r.prototype.__tryOrSetError=function(t,r,n){if(!a.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{r.call(this._context,n)}catch(r){return a.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=r,t.syncErrorThrown=!0,!0):(p(r),!0)}return!1},r.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},r}(w);var m="function"==typeof Symbol&&Symbol.observable||"@@observable";function S(){}function g(t){return t?1===t.length?t[0]:function(r){return t.reduce(function(t,r){return r(t)},r)}:S}var x=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(r){var n=new t;return n.source=this,n.operator=r,n},t.prototype.subscribe=function(t,r,n){var e=this.operator,o=function(t,r,n){if(t){if(t instanceof w)return t;if(t[v])return t[v]()}return t||r||n?new w(t,r,n):new w(f)}(t,r,n);if(e?o.add(e.call(o,this.source)):o.add(this.source||a.useDeprecatedSynchronousErrorHandling&&!o.syncErrorThrowable?this._subscribe(o):this._trySubscribe(o)),a.useDeprecatedSynchronousErrorHandling&&o.syncErrorThrowable&&(o.syncErrorThrowable=!1,o.syncErrorThrown))throw o.syncErrorValue;return o},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(r){a.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=r),!function(t){for(;t;){var r=t,n=r.closed,e=r.destination,o=r.isStopped;if(n||o)return!1;t=e&&e instanceof w?e:null}return!0}(t)?console.warn(r):t.error(r)}},t.prototype.forEach=function(t,r){var n=this;return new(r=O(r))(function(r,e){var o;o=n.subscribe(function(r){try{t(r)}catch(t){e(t),o&&o.unsubscribe()}},e,r)})},t.prototype._subscribe=function(t){var r=this.source;return r&&r.subscribe(t)},t.prototype[m]=function(){return this},t.prototype.pipe=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return 0===t.length?this:g(t)(this)},t.prototype.toPromise=function(t){var r=this;return new(t=O(t))(function(t,n){var e;r.subscribe(function(t){return e=t},function(t){return n(t)},function(){return t(e)})})},t.create=function(r){return new t(r)},t}();function O(t){if(t||(t=a.Promise||Promise),!t)throw new Error("no Promise impl found");return t}function T(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}T.prototype=Object.create(Error.prototype);var j=T,P=function(t){function r(r,n){var e=t.call(this)||this;return e.subject=r,e.subscriber=n,e.closed=!1,e}return u(r,t),r.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var t=this.subject,r=t.observers;if(this.subject=null,r&&0!==r.length&&!t.isStopped&&!t.closed){var n=r.indexOf(this.subscriber);-1!==n&&r.splice(n,1)}}},r}(y),D=function(t){function r(r){var n=t.call(this,r)||this;return n.destination=r,n}return u(r,t),r}(w),H=function(t){function r(){var r=t.call(this)||this;return r.observers=[],r.closed=!1,r.isStopped=!1,r.hasError=!1,r.thrownError=null,r}return u(r,t),r.prototype[v]=function(){return new D(this)},r.prototype.lift=function(t){var r=new k(this,this);return r.operator=t,r},r.prototype.next=function(t){if(this.closed)throw new j;if(!this.isStopped)for(var r=this.observers,n=r.length,e=r.slice(),o=0;o<n;o++)e[o].next(t)},r.prototype.error=function(t){if(this.closed)throw new j;this.hasError=!0,this.thrownError=t,this.isStopped=!0;for(var r=this.observers,n=r.length,e=r.slice(),o=0;o<n;o++)e[o].error(t);this.observers.length=0},r.prototype.complete=function(){if(this.closed)throw new j;this.isStopped=!0;for(var t=this.observers,r=t.length,n=t.slice(),e=0;e<r;e++)n[e].complete();this.observers.length=0},r.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},r.prototype._trySubscribe=function(r){if(this.closed)throw new j;return t.prototype._trySubscribe.call(this,r)},r.prototype._subscribe=function(t){if(this.closed)throw new j;return this.hasError?(t.error(this.thrownError),y.EMPTY):this.isStopped?(t.complete(),y.EMPTY):(this.observers.push(t),new P(this,t))},r.prototype.asObservable=function(){var t=new x;return t.source=this,t},r.create=function(t,r){return new k(t,r)},r}(x),k=function(t){function r(r,n){var e=t.call(this)||this;return e.destination=r,e.source=n,e}return u(r,t),r.prototype.next=function(t){var r=this.destination;r&&r.next&&r.next(t)},r.prototype.error=function(t){var r=this.destination;r&&r.error&&this.destination.error(t)},r.prototype.complete=function(){var t=this.destination;t&&t.complete&&this.destination.complete()},r.prototype._subscribe=function(t){return this.source?this.source.subscribe(t):y.EMPTY},r}(H),M=function(){return function(t){this.send=new H,this.receive=new H,this.ping=new Promise(function(r){return r(t)})}}(),A=function(){return function(t){var r=this;this.nodes=t,t.forEach(function(t){var n=t.links.map(function(t){return t.toNode}),e=new M(n);r.bridges.push(new i(t.name,t.value,e))}),this.bridges.forEach(function(n){var e=t.find(function(t){return t.name===n.name}).links.map(function(t){return t.toNode});n.connection.send.subscribe(function(t){e.findIndex(function(r){return r===t.target})&&r.bridges.find(function(r){return r.name===t.target}).connection.receive.next(t)})})}}(),B=document.getElementById("textIn"),I=(document.getElementById("textOut"),document.getElementById("simulate_btn"));B.value="\nGraph mygraph {\n\t// Node\n\tA = 5;\n\tB = 1;\n\tC = 3;\n\tD = 7;\n\tE = 6;\n\tF = 4;\n\t\n\t// Links und zugeh. Kosten\n\tA - B : 10;\n\tA - C : 10;\n\tB - D : 15;\n\tB - E : 10;\n\tC - D : 3;\n\tC - E : 10;\n\tD - E : 2;\n\tD - F : 10;\n\tE - F : 2;\n}",console.log(B);I.addEventListener("click",function(){var t=function(t){for(var r=[],n=[],i=t.match(/(?<=Graph[ ])(\S+)/g)[0],s=t.match(/[^\s]+(?= =)|(?<== )[1-9]*/g),u=t.match(/[^\s]+(?= -)|[^\s]+(?= :)|(?<=: )[0-9]*/g),c=0;c<u.length;c+=3)r.push({nodes:[u[c],u[c+1]],cost:+u[c+2]});var h=function(t){var i=s[t],u=+s[t+1],c=r.filter(function(t){return-1!==t.nodes.findIndex(function(t){return t===i})}).map(function(t){return new e(t.nodes.find(function(t){return t!==i}),t.cost)});n.push(new o(i,u,c))};for(c=0;c<s.length;c+=2)h(c);return{graphName:i,nodes:n}}(B.value),r=new A(t.nodes);console.log(r)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,